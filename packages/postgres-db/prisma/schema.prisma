
generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String?    @unique
  name      String?
  avatarUrl String?
  role      UserRole  @default(STUDENT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  uploadedDocs UploadedDocs[] @relation("UserDocs")
  aiChatHistories   AiChatHistory[]  @relation("UserChats")

  @@map("users") 
}

enum UserRole {
  STUDENT
  ADMIN
}

model UploadedDocs {
  id          String         @id @default(uuid())
  fileName    String
  fileUrl     String 
  fileType    FileType       @default(PDF)
  uploadedById String
  uploadedBy  User           @relation("UserDocs", fields: [uploadedById], references: [id], onDelete: Cascade)
  topic       String?
  createdAt   DateTime       @default(now())

  aiChatHistories AiChatHistory[] @relation("DocChats")

  @@map("uploaded_docs")
}

enum FileType {
  PDF
  // will add IMAGE, TEXT, etc. later
}

model AiChatHistory {
  id             String    @id @default(uuid())
  userId         String
  user           User      @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  resourceId     String
  resource       UploadedDocs @relation("DocChats", fields: [resourceId], references: [id], onDelete: Cascade)
  prompt         String
  response       String
  context        Json?
  timestamp      DateTime  @default(now())

  @@map("ai_chat_history")
}